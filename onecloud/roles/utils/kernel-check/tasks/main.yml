---
- name: Define kernel regex
  set_fact: kernel_regex="\.yn[0-9]{8}\."

- name: test if nbd is supported
  environment:
    PATH: $PATH:/usr/sbin:/sbin
  shell: modprobe nbd
  register: nbd_status
  ignore_errors: yes
  no_log: true
  failed_when: false

- name: nbd facts
  set_fact:
    nbd_ok: true
  when: nbd_status.rc == 0

- name: Is Cloud kernel running
  shell: |
    uname -r | grep -E "{{ kernel_regex }}"
  register: is_yunion_kernel_running
  changed_when: false
  failed_when: false

- name: Is cloud kernel installed
  shell: |
    if rpm --version &>/dev/null; then
      count=$(rpm -qa |grep kernel |grep -E "{{ kernel_regex }}" |wc -l || :)
    elif dpkg --version &>/dev/null; then
      count=$(dpkg -l |grep kernel |grep -E "{{ kernel_regex }}" |wc -l || :)
    fi
    [[ "$count" -ge 1 ]]
  args:
    executable: /bin/bash
  register: is_yunion_kernel_installed
  changed_when: false
  failed_when: false

- name: install customized kernel
  include: "{{ ansible_distribution | lower }}-{{ ansible_architecture }}.yml"
  when:
  - nbd_ok|default(false)|bool == false
  - is_yunion_kernel_installed.rc != 0

# setup hugetlb
- name: ensure hugetlb init dir exists
  file:
    path: /usr/local/hugetlb-init
    state: directory
  become: yes

- name: cp hugetlb setup script
  become: yes
  copy:
    src: hugetlb_setup.sh
    dest: /usr/local/hugetlb-init/hugetlb_setup.sh
    owner: root
    group: root
    mode: preserve

- name: hugetlb service
  become: yes
  copy:
    src: oc-hugetlb-gigantic-pages.service
    dest: /usr/lib/systemd/system/oc-hugetlb-gigantic-pages.service
    owner: root
    group: root
    mode: 0644

- name: hugetlb script
  become: yes
  copy:
    src: oc-hugetlb-reserve-pages.sh
    dest: /usr/lib/systemd/oc-hugetlb-reserve-pages.sh
    owner: root
    group: root
    mode: 0755

- name: init hugetlb
  shell: bash /usr/local/hugetlb-init/hugetlb_setup.sh
  args:
    executable: /bin/bash
    chdir: /usr/local/hugetlb-init
  failed_when: false

  # TODO split for all arch, distribution, online/offline status

  # TODO
- name: generate grub
  shell: |
    echo TODO

- name: Reboot system if not cloud kernel, it should take a few minutes...
  reboot:
    reboot_timeout:  900 # 15 mins
    connect_timeout: 900 # 15 mins
    msg: "rebooting host to enable cloud kernel ... please wait... "
    test_command: "uname -r | grep -qE '{{ kernel_regex }}'   "
  become: yes
  when:
  - is_yunion_kernel_running.rc != 0
  - ansible_connection == "ssh"
  - k8s_node_as_oc_host|default(false)|bool == true or enable_lbagent|default(false)|bool == true
  - is_centos_based is defined
  - nbd_ok|default(false)|bool == false

# to "ignore Running reboot with local connection would reboot the control node"
# warning
- name: force reboot the primary node if applicable
  shell: reboot
  become: yes
  when:
  - must_reboot |default(false)|bool == true
  - is_yunion_kernel_running.rc != 0
  - k8s_node_as_oc_host|default(false)|bool == true
  - is_centos_based is defined
  - nbd_ok|default(false)|bool == false
