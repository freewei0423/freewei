- name: Include vars
  include_vars: ../vars/default.yml

- name: Get Yunion Bin version
  shell: |
    get_kubelet_version() {
      local version_string="$1"
      local version_regex="v[0-9]+\.[0-9]+(\.[0-9]+)?"
      if [[ ${version_string:0:1} != "v" ]]; then
          version_string=v"$version_string"
      fi
      if [[ $version_string =~ $version_regex ]]; then
          echo "${BASH_REMATCH[0]}"
      else
          echo "Invalid version string: $version_string"
          return 1
      fi
    }
    climc_version=$(/opt/yunion/bin/climc --version|grep gitVersion |awk '{print $2}' |sed -e 's#[",]*##g')
    get_kubelet_version "$climc_version"
    # only for 3.10+
    climc_ee_version=$(/opt/yunion/bin/climc-ee --version|grep gitVersion |awk '{print $2}' |sed -e 's#[",]*##g')
    get_kubelet_version "$climc_ee_version"

    ocadm_output=$(/opt/yunion/bin/ocadm version |grep -Po 'GitVersion[^,]+' |grep -oP '".*"' |xargs)

    get_kubelet_version "$ocadm_output"

  register: yunion_bin_version_ret
  become: yes
  args:
    executable: /bin/bash

- name: set facts
  set_fact:
    YUNION_BIN_GT: "{{ onecloud_version.split('.')[:2] | join('.')}}"
  when:
  - onecloud_version | default('') | length > 0

- name: Assert yunion bin version
  assert:
    that:
      - 'item is version(YUNION_BIN_GT, ">=")'
    fail_msg: "Yunion's version must be greater than {{ YUNION_BIN_GT }}, got {{ item }}."
  loop: "{{ yunion_bin_version_ret.stdout.split('\n') | list }}"
  when:
  - YUNION_BIN_GT | default('') | length > 0

- name: Get Kubectl Bin version
  shell: |
    get_kubelet_version() {
      local version_string="$1"
      local version_regex="v[0-9]+\.[0-9]+(\.[0-9]+)?"

      if [[ $version_string =~ $version_regex ]]; then
        echo "${BASH_REMATCH[0]}"
      else
        echo "Invalid version string: $version_string"
        return 1
      fi
    }
    kubelet --version|awk '{print $2}'
    version_output=$(kubectl version --client |grep 'Client Version')
    get_kubelet_version "$version_output"
    version_output=$(kubeadm version)
    get_kubelet_version "$version_output"
  register: kubectl_version_ret
  become: yes
  args:
    executable: /bin/bash

- debug: var=kubectl_version_ret.stdout

- name: Assert kubelet version
  assert:
    that:
      - 'item is version(K8S_VERSION_GE, ">=")'
      - 'item is version(K8S_VERSION_LT, "<")'
    fail_msg: "k8s's version must be {{K8S_VERSION_GE}}~{{K8S_VERSION_LT}}, got {{item}}."
  loop: "{{ kubectl_version_ret.stdout.split('\n') | list }}"

