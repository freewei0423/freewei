- name: Include vars
  include_vars: ../vars/default.yml

- name: Get Yunion Bin version
  shell: |
    get_kubelet_version() {
      local version_string="$1"
      local version_regex="v[0-9]+\.[0-9]+(\.[0-9]+)?"

      if [[ $version_string =~ $version_regex ]]; then
        echo "${BASH_REMATCH[0]}"
      else
        echo "Invalid version string: $version_string"
        return 1
      fi
    }
    climc_version=$(/opt/yunion/bin/climc --version |xargs)
    get_kubelet_version "$climc_version"
    # only for 3.10+
    climc_ee_version=$(/opt/yunion/bin/climc-ee --version |xargs)
    get_kubelet_version "$climc_ee_version"

    ocadm_output=$(/opt/yunion/bin/ocadm version)
    get_kubelet_version "$ocadm_output"
  register: yunion_bin_version_ret
  become: yes
  args:
    executable: /bin/bash

- debug: var=yunion_bin_version_ret.stdout

- name: Assert yunion bin version
  assert:
    that:
      - '"{{item}}" is version(yunion_bin_ge, ">=")'
    fail_msg: "yunion's version must be greater than {{ yunion_bin_ge }}, got {{item}}."
  loop: "{{yunion_bin_version_ret.stdout.split('\n') | list }}"
  when:
  - onecloud_version is version('v3.10', '>=')

- name: Get Kubectl Bin version
  shell: |
    get_kubelet_version() {
      local version_string="$1"
      local version_regex="v[0-9]+\.[0-9]+(\.[0-9]+)?"

      if [[ $version_string =~ $version_regex ]]; then
        echo "${BASH_REMATCH[0]}"
      else
        echo "Invalid version string: $version_string"
        return 1
      fi
    }
    kubelet --version|awk '{print $2}'
    version_output=$(kubectl version --client |grep 'Client Version')
    get_kubelet_version "$version_output"
    version_output=$(kubeadm version)
    get_kubelet_version "$version_output"
  register: kubectl_version_ret
  become: yes
  args:
    executable: /bin/bash

- debug: var=kubectl_version_ret.stdout
- debug: var=k8s_version_ge

- name: Assert kubelet version
  assert:
    that:
      - '"{{item}}" is version(k8s_version_ge, ">=")'
      - '"{{item}}" is version(k8s_version_lt, "<")'
    fail_msg: "k8s's version must be {{k8s_version_ge}}~{{k8s_version_lt}}, got {{item}}."
  loop: "{{kubectl_version_ret.stdout.split('\n') | list }}"

