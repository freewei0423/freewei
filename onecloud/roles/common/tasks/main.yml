---
# - name: checking ports
#   include_role:
#     name: utils/port-check

- name: Install yum utils
  yum:
    name:
      - bash-completion
      - epel-release
      - ca-certificates
    state: latest
  when:
  - is_centos_based is defined
  - non_iso_mode is defined

- name: Set facts
  set_fact:
    major_version_task_file: "{{ onecloud_major_version }}.yml"

- name: Import task "{{ major_version_task_file }}"
  include_tasks: "{{ major_version_task_file }}"

- name: config iptables for debian likely OS
  shell: |
    if iptables -V |grep -wq nf_tables && ls -l /usr/sbin/iptables |grep -wq alternatives; then
      update-alternatives --set iptables /usr/sbin/iptables-legacy
      update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
      update-alternatives --set arptables /usr/sbin/arptables-legacy
      update-alternatives --set ebtables /usr/sbin/ebtables-legacy
      if [ -x /usr/bin/aptitude ] && [ ! -x /usr/sbin/nft ]; then
          aptitude install nftables -y
          nft flush ruleset
      fi
    fi
  when:
  - is_debian_based is defined
  args:
    executable: /bin/bash

- name: reset iptables rules
  shell: |
    # backup iptable ruleset
    fn=/etc/iptables.backup.$(date +"%Y%m%d-%H%M%S")
    iptables-save > "$fn"

    # reset iptable rules
    iptables -t nat -F
    iptables -t nat -X
    iptables -t nat -P PREROUTING ACCEPT
    iptables -t nat -P POSTROUTING ACCEPT
    iptables -t nat -P OUTPUT ACCEPT
    iptables -t mangle -F
    iptables -t mangle -X
    iptables -t mangle -P PREROUTING ACCEPT
    iptables -t mangle -P INPUT ACCEPT
    iptables -t mangle -P FORWARD ACCEPT
    iptables -t mangle -P OUTPUT ACCEPT
    iptables -t mangle -P POSTROUTING ACCEPT
    iptables -F
    iptables -X
    iptables -P FORWARD ACCEPT
    iptables -P INPUT ACCEPT
    iptables -P OUTPUT ACCEPT
    iptables -t raw -F
    iptables -t raw -X
    iptables -t raw -P PREROUTING ACCEPT
    iptables -t raw -P OUTPUT ACCEPT
    service iptables save || :
    service iptables restart || :
  args:
    executable: /bin/bash

- name: install packages via loop
  package: name="{{ item }}"
  with_items:
  - "{{ common_packages }}"
  when:
  - common_packages is defined
  - non_iso_mode is defined

- name: Check that if selinux config exists
  stat:
    path: /etc/selinux/config
  register: selinux_conf_exists

- name: Turn off selinux
  selinux:
    state: disabled
  when: selinux_conf_exists.stat.exists

- name: Gather service facts
  service_facts:

- name: Disable systemd services
  service:
    name: "{{ item }}"
    enabled: no
    state: stopped
  when: "item + '.service' in ansible_facts.services"
  loop:
  - firewalld

- name: ensure systemd installed
  package:
   name: systemd
   state: latest
  when:
    - is_centos_based is defined

- name: Config NetworkManager
  include_role:
    name: utils/config-network-manager

- name: Load br_netfilter
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
  - br_netfilter
  - ip_conntrack

- name: Load br_netfilter at boot
  copy:
    owner: root
    group: root
    mode: "0644"
    dest: /etc/modules-load.d/kubernetes.conf
    content:
      br_netfilter

- name: Change sysctl setting
  sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
  loop:
  - net.bridge.bridge-nf-call-iptables
  - net.bridge.bridge-nf-call-ip6tables
  - net.ipv4.ip_forward

- name: Change sysctl fs.inotify.max_user_watches
  sysctl:
    name: "fs.inotify.max_user_watches"
    value: "65536"
    state: present

- name: Change sysctl fs.inotify.max_user_instances
  sysctl:
    name: "fs.inotify.max_user_instances"
    value: "8192"
    state: present

- name: Disable systemd swap service
  shell: |
    dev=$(cat /proc/swaps |grep -v 'Filename' |wc -l)
    if [ "$dev" -eq 0 ]; then
      exit 0
    fi

    for i in $(systemctl --type swap --all|grep 'dev'|grep active |awk '{print $1}' ); do
        if [ -z "$i" ]; then
            continue
        fi
        systemctl stop "$i"
        systemctl mask "$i"
    done
    systemctl daemon-reload

    cp -fv /etc/fstab /etc/fstab.$(date +"%Y%m%d-%H%M%S").bak
    sed -i '/swap/ s/^#*/#/' -i /etc/fstab

  args:
    executable: /bin/bash
  when:
  - is_debian_based is defined

#  https://github.com/kubernetes-retired/contrib/blob/master/ansible/roles/node/tasks/swapoff.yml
- name: Turn off swap mount
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
  - swap
  - none

- name: Turn off swap now
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Create a directory if it does not exist
  file:
    path: /etc/sysconfig/modules/
    state: directory
    mode: '0755'

- name: Config ipvs
  copy:
    owner: root
    group: root
    mode: "0755"
    src: ipvs.modules
    dest: /etc/sysconfig/modules/ipvs.modules

- name: Load ipvs modules
  shell:
    /etc/sysconfig/modules/ipvs.modules

# docker
- block:
  - name: Install docker
    yum:
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
    when:
    - is_centos_based is defined
    - non_iso_mode is defined

  - name: Make /etc/docker dir
    file:
      path: /etc/docker
      state: directory
      owner: root
      group: root

  - name: Config docker file
    template: src=daemon.json.j2 dest=/etc/docker/daemon.json

  - name: Restart docker service
    service: name=docker state=restarted daemon_reload=yes enabled=yes
  when:
    skip_docker_config is not defined or skip_docker_config|default(false)|bool == false

# k8s packages
- name: Enable kubelet
  service: name=kubelet enabled=yes
  tags: k8s

- name: Export yunion bin path in /etc/profile
  lineinfile:
    dest: /etc/profile
    line: "export PATH=$PATH:/opt/yunion/bin"
    state: present
    create: yes
    regexp: '^export PATH=.*/opt/yunion/bin'
  when: shell is undefined or shell == 'bash'

- name: Enable yunion systemd services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
  - yunion-executor

- name: Include cronjobs
  include_role:
    name: utils/cronjobs
